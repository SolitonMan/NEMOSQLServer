# -*- coding: utf-8 -*-
# Generated by Django 1.11.15 on 2018-12-26 22:15
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('NEMO', '0007_taskhistory_shutdown'),
    ]

    operations = [
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('created', models.DateTimeField(help_text='The date and time this story was first published')),
                ('original_content', models.TextField(help_text="The content of the story when it was first published, useful for visually hiding updates 'in the middle' of the story")),
                ('all_content', models.TextField(help_text='The entire content of the story')),
                ('last_updated', models.DateTimeField(help_text='The date and time this story was last updated')),
                ('last_update_content', models.TextField(help_text="The most recent update to the story, useful for visually hiding updates 'in the middle' of the story")),
                ('archived', models.BooleanField(default=False, help_text="A story is removed from the 'Recent News' page when it is archived")),
                ('update_count', models.PositiveIntegerField(help_text="The number of times this story has been updated. When the number of updates is greater than 2, then only the original story and the latest update are displayed in the 'Recent News' page")),
            ],
            options={
                'verbose_name_plural': 'News',
                'ordering': ['-last_updated'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expiration', models.DateTimeField()),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.RemoveField(
            model_name='task',
            name='first_responder',
        ),
        migrations.RemoveField(
            model_name='task',
            name='first_response_time',
        ),
        migrations.RemoveField(
            model_name='task',
            name='status',
        ),
        migrations.RemoveField(
            model_name='taskstatus',
            name='notify_secondary_tool_owner',
        ),
        migrations.RemoveField(
            model_name='tool',
            name='secondary_owner',
        ),
        migrations.AddField(
            model_name='landingpagechoice',
            name='notifications',
            field=models.CharField(blank=True, choices=[('news', 'News creation and updates - notifies all users'), ('safetyissue', 'New safety issues - notifies staff only')], help_text="Displays a the number of new notifications for the user. For example, if the user has two unread news notifications then the number '2' would appear for the news icon on the landing page.", max_length=25, null=True),
        ),
        migrations.AddField(
            model_name='taskstatus',
            name='notify_backup_tool_owners',
            field=models.BooleanField(default=False, help_text='Notify the backup tool owners when a task transitions to this status'),
        ),
        migrations.AddField(
            model_name='tool',
            name='backup_owners',
            field=models.ManyToManyField(blank=True, help_text='Alternate staff members who are responsible for administration of this tool when the primary owner is unavailable.', related_name='backup_for_tools', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='tool',
            name='grant_badge_reader_access_upon_qualification',
            field=models.CharField(blank=True, help_text='Badge reader access is granted to the user upon qualification for this tool.', max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='tool',
            name='grant_physical_access_level_upon_qualification',
            field=models.ForeignKey(blank=True, help_text='The designated physical access level is granted to the user upon qualification for this tool.', null=True, on_delete=django.db.models.deletion.CASCADE, to='NEMO.PhysicalAccessLevel'),
        ),
    ]
